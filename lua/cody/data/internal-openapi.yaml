# Code generated by TypeSpec - DO NOT EDIT
openapi: 3.0.0
info:
  title: Sourcegraph Internal API
  version: Latest
tags: []
paths:
  /.api/agents:
    get:
      operationId: AgentService_retrieveAgents
      parameters:
        - name: page[number]
          in: query
          required: false
          schema:
            type: integer
            format: uint32
          explode: false
        - name: page[size]
          in: query
          required: false
          schema:
            type: integer
            format: uint32
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentRetrieveResponse'
    post:
      operationId: AgentService_createAgent
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agent'
  /.api/agents/{agent_id}:
    get:
      operationId: AgentService_retrieveAgent
      parameters:
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
    patch:
      operationId: AgentService_updateAgent
      parameters:
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentUpdate'
    delete:
      operationId: AgentService_removeAgent
      parameters:
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
  /.api/agents/{agent_id}/connections:
    post:
      operationId: AgentService_createConnection
      parameters:
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentConnection'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentConnection'
  /.api/agents/{agent_id}/connections/{connection_id}:
    patch:
      operationId: AgentService_updateConnection
      parameters:
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
        - name: connection_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentConnection'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentConnectionUpdate'
    delete:
      operationId: AgentService_removeConnection
      parameters:
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
        - name: connection_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
  /.api/agents/{agent_id}/programs:
    post:
      operationId: AgentService_createProgram
      parameters:
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentProgram'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentProgram'
  /.api/agents/{agent_id}/programs/{program_id}:
    patch:
      operationId: AgentService_updateProgram
      parameters:
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
        - name: program_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentProgram'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentProgramUpdate'
    delete:
      operationId: AgentService_removeProgram
      parameters:
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
        - name: program_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
  /.api/client-config:
    get:
      operationId: getClientConfig
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientConfig'
  /.api/cody/auditlog:
    get:
      operationId: CodyAuditLog_retrieve
      description: |-
        Returns all audit log entries as a stream of bytes, which can be consumed
        as a Protobuf payload.
      parameters:
        - name: before
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: after
          in: query
          required: false
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: string
                format: byte
    delete:
      operationId: CodyAuditLog_delete
      parameters:
        - name: before
          in: query
          required: false
          schema:
            type: string
          explode: false
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
  /.api/completions/code:
    post:
      operationId: Completions_completions
      summary: Get LLM completions as a non-streaming response
      parameters:
        - name: api-version
          in: query
          required: false
          description: |-
            ## API Versioning

            **v1**. Added support for system prompts. Uses `'completion'` property for
            streaming responses.

            **v2**. Added support for incremental streaming responses. Uses `'deltaText'`
            instead of `'completion'` property.

            **v3**. Added support for vision. Concrete changes

            - The `Message.content` property now supports the union
            `string | MessageContentPart[]` encoding instead of just `string`.
            With `MessageContentPart[]`, you can now include images via `ImageMessageContentPart`.
            - The property `Message.speaker = "human" | "assistant" | "system"` is now
            replaced with `Message.role = "user" | "assistant" | "system"` for improved
            compatibility with OpenAI clients. The old speaker:human syntax is still supported.
            - The `Message.text` property is replaced with `Message.content`
            for consistency with OpenAI clients.  The old `Message.text` property is still
            supported for backwards compatibility.

            **v4**. Added support for file and repo context items.

            **v5**. Added token usage tracking to the response.

            **v6**. Added support for tools (aka. function calling).
          schema:
            type: number
            enum:
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
          explode: false
        - name: client-name
          in: query
          required: false
          description: The name of the application sending this request. For example, "cody-web" or "jetbrains".
          schema:
            type: string
          explode: false
        - name: client-version
          in: query
          required: false
          description: The version of the application sending this request. For example, "2.0.0".
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionRequest'
  /.api/completions/stream:
    post:
      operationId: Completions_chatCompletions
      summary: Get streaming LLM completions with SSE
      parameters:
        - name: api-version
          in: query
          required: false
          description: |-
            ## API Versioning

            **v1**. Added support for system prompts. Uses `'completion'` property for
            streaming responses.

            **v2**. Added support for incremental streaming responses. Uses `'deltaText'`
            instead of `'completion'` property.

            **v3**. Added support for vision. Concrete changes

            - The `Message.content` property now supports the union
            `string | MessageContentPart[]` encoding instead of just `string`.
            With `MessageContentPart[]`, you can now include images via `ImageMessageContentPart`.
            - The property `Message.speaker = "human" | "assistant" | "system"` is now
            replaced with `Message.role = "user" | "assistant" | "system"` for improved
            compatibility with OpenAI clients. The old speaker:human syntax is still supported.
            - The `Message.text` property is replaced with `Message.content`
            for consistency with OpenAI clients.  The old `Message.text` property is still
            supported for backwards compatibility.

            **v4**. Added support for file and repo context items.

            **v5**. Added token usage tracking to the response.

            **v6**. Added support for tools (aka. function calling).
          schema:
            type: number
            enum:
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
          explode: false
        - name: client-name
          in: query
          required: false
          description: The name of the application sending this request. For example, "cody-web" or "jetbrains".
          schema:
            type: string
          explode: false
        - name: client-version
          in: query
          required: false
          description: The version of the application sending this request. For example, "2.0.0".
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionRequest'
  /.api/modelconfig/supported-models.json:
    get:
      operationId: getSupportedModels
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelCatalog'
  /.api/reviews:
    post:
      operationId: ReviewService_reviewDiff
      description: |-
        Requests a code review of a given Git diff. Supports GitHub Pull Requests and Gitlab Merge Requests.

        The `diff` field in the request body must be defined.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
  /.api/reviews/diagnostics/{diagnostic_id}:
    get:
      operationId: ReviewService_retrieveDiagnostic
      description: Retrieve a diagnostic by its review ID.
      parameters:
        - name: diagnostic_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewDiagnostic'
  /.api/reviews/diagnostics/{diagnostic_id}/feedback:
    post:
      operationId: ReviewService_createDiagnosticFeedback
      parameters:
        - name: diagnostic_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewDiagnosticFeedback'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewDiagnosticFeedback'
  /.api/reviews/rules/builtin:
    get:
      operationId: ReviewService_retrieveBuiltinRules
      description: Retrieve the list of built-in review rules.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewRetrieveRulesResponse'
  /.api/reviews/{review_id}:
    get:
      operationId: ReviewService_retrieveReview
      description: Retrieve a review by its review ID.
      parameters:
        - name: review_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
  /.api/tools:
    get:
      operationId: ToolService_listTools
      description: |-
        Returns a list of tools describing APIs that can be used together as
        building blocks for agents.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListToolsResponse'
security:
  - SourcegraphTokenAuth: []
components:
  schemas:
    Agent:
      type: object
      required:
        - id
        - connections
        - programs
      properties:
        id:
          type: integer
          format: int32
          description: Unique identifier for the agent, generated by the server.
        owner_user_id:
          type: integer
          format: int32
          nullable: true
          description: |-
            The ID of the user who created the agent.

            Agent programs will be run as this user, and API consumption will be
            attributed to this user.
        title:
          type: string
          nullable: true
          description: |-
            The title of the agent.

            For example, "Security Review Agent"
        description:
          type: string
          nullable: true
          description: A short description describing the goals of this agent.
        connections:
          type: array
          items:
            $ref: '#/components/schemas/AgentConnection'
          description: Connections with external services like GitHub and GitLab.
        programs:
          type: array
          items:
            $ref: '#/components/schemas/AgentProgram'
          description: Installed programs for this agent.
    AgentConnection:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: integer
          format: int32
        type:
          type: string
          enum:
            - github_app
            - github_webhook
            - gitlab_webhook
        github_app:
          type: object
          allOf:
            - $ref: '#/components/schemas/AgentGitHubAppConnection'
          nullable: true
    AgentConnectionUpdate:
      type: object
      properties:
        id:
          type: integer
          format: int32
        type:
          type: string
          enum:
            - github_app
            - github_webhook
            - gitlab_webhook
        github_app:
          type: object
          allOf:
            - $ref: '#/components/schemas/AgentGitHubAppConnectionUpdate'
          nullable: true
    AgentGitHubAppConnection:
      type: object
      required:
        - github_app_id
      properties:
        github_app_id:
          type: integer
          format: int32
        webhook_id:
          type: integer
          format: int32
          nullable: true
          description: |-
            The webhook ID to use for incoming events.

            If you create a GitHub app on Sourcegraph, it will automatically create
            a webhook ID for you. When creating agent connections, this should be left
            undefined if you want to use the automatically connected webhook ID.

            Only set this to a custom ID if you know what you are doing. For example,
            you manually created a webhook in the UI and want to use that over the
            webhook ID that is automatically connected to the GitHub app.
    AgentGitHubAppConnectionUpdate:
      type: object
      properties:
        github_app_id:
          type: integer
          format: int32
        webhook_id:
          type: integer
          format: int32
          nullable: true
          description: |-
            The webhook ID to use for incoming events.

            If you create a GitHub app on Sourcegraph, it will automatically create
            a webhook ID for you. When creating agent connections, this should be left
            undefined if you want to use the automatically connected webhook ID.

            Only set this to a custom ID if you know what you are doing. For example,
            you manually created a webhook in the UI and want to use that over the
            webhook ID that is automatically connected to the GitHub app.
    AgentProgram:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int32
        status:
          type: string
          enum:
            - enabled
            - disabled
          nullable: true
          description: |-
            The status of the program.

            Null means it's not set (for example, in PATCH requests).
        files:
          type: array
          items:
            $ref: '#/components/schemas/AgentProgramFile'
          nullable: true
          description: |-
            The files that make up this program.

            Null means it's not set, empty array means it's empty.

            The only valid format is a single file with a .sourcegraph/review-agent.json
            file, which contains a ReviewRequestConfiguration. For example:
            ```jsonc
            // File: .sourcegraph/review-agent.json
            {
                "rules": ["all-builtin", "all-inferred"],
                "minimum_severity": "error",
            }
            ```
            The minimum requirement is to have an empty object for the configuration.
            ```jsonc
            // File: .sourcegraph/review-agent.json
            {}
            ```
      description: |-
        An agent program is a small of code that is evaluated whenever an event happens
        from the agent's connections.
    AgentProgramFile:
      type: object
      required:
        - path
        - content
      properties:
        path:
          type: string
        content:
          type: string
    AgentProgramUpdate:
      type: object
      properties:
        id:
          type: integer
          format: int32
        status:
          type: string
          enum:
            - enabled
            - disabled
          nullable: true
          description: |-
            The status of the program.

            Null means it's not set (for example, in PATCH requests).
        files:
          type: array
          items:
            $ref: '#/components/schemas/AgentProgramFile'
          nullable: true
          description: |-
            The files that make up this program.

            Null means it's not set, empty array means it's empty.

            The only valid format is a single file with a .sourcegraph/review-agent.json
            file, which contains a ReviewRequestConfiguration. For example:
            ```jsonc
            // File: .sourcegraph/review-agent.json
            {
                "rules": ["all-builtin", "all-inferred"],
                "minimum_severity": "error",
            }
            ```
            The minimum requirement is to have an empty object for the configuration.
            ```jsonc
            // File: .sourcegraph/review-agent.json
            {}
            ```
      description: |-
        An agent program is a small of code that is evaluated whenever an event happens
        from the agent's connections.
    AgentRetrieveResponse:
      type: object
      required:
        - agents
      properties:
        agents:
          type: array
          items:
            $ref: '#/components/schemas/Agent'
    AgentUpdate:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Unique identifier for the agent, generated by the server.
        owner_user_id:
          type: integer
          format: int32
          nullable: true
          description: |-
            The ID of the user who created the agent.

            Agent programs will be run as this user, and API consumption will be
            attributed to this user.
        title:
          type: string
          nullable: true
          description: |-
            The title of the agent.

            For example, "Security Review Agent"
        description:
          type: string
          nullable: true
          description: A short description describing the goals of this agent.
        connections:
          type: array
          items:
            $ref: '#/components/schemas/AgentConnection'
          description: Connections with external services like GitHub and GitLab.
        programs:
          type: array
          items:
            $ref: '#/components/schemas/AgentProgram'
          description: Installed programs for this agent.
    AssistantToolsFunction:
      type: object
      required:
        - type
        - function
      properties:
        type:
          type: string
          enum:
            - function
        function:
          $ref: '#/components/schemas/FunctionObject'
    ClientConfig:
      type: object
      required:
        - codyEnabled
        - chatEnabled
        - autoCompleteEnabled
        - customCommandsEnabled
        - attributionEnabled
        - smartContextWindowEnabled
        - modelsAPIEnabled
      properties:
        codyEnabled:
          type: boolean
          description: Whether the site admin allows this user to make use of Cody at all.
        chatEnabled:
          type: boolean
          description: Whether the site admin allows this user to make use of the Cody chat feature.
        autoCompleteEnabled:
          type: boolean
          description: Whether the site admin allows this user to make use of the Cody autocomplete feature.
        customCommandsEnabled:
          type: boolean
          description: Whether the site admin allows the user to make use of the **custom** Cody commands feature.
        attributionEnabled:
          type: boolean
          description: Whether the site admin allows this user to make use of the Cody attribution feature.
        smartContextWindowEnabled:
          type: boolean
          description: |-
            Whether the 'smart context window' feature should be enabled, and whether the Sourcegraph
            instance supports various new GraphQL APIs needed to make it work.
        modelsAPIEnabled:
          type: boolean
          description: |-
            Whether the new Sourcegraph backend LLM models API endpoint should be used to query which
            models are available.
        latestSupportedCompletionsStreamAPIVersion:
          type: integer
          format: int32
          description: |-
            The latest `api-version=N` query parameter that is supported by the
            `POST /.api/completions/stream` endpoint. This field was added after
            `api-version=2` so you will never get a response with `api-version=1` or
            lower even when `api-version=1` is supported on the instance.
        userShouldUseEnterprise:
          type: boolean
          description: Whether the user should be redirected to the enterprise version of Sourcegraph from PLG, assuming they are on PLG by accident.
      description: |-
        This is the JSON object which all clients request after authentication to determine how
        they should behave, e.g. if a site admin has restricted chat/autocomplete/other functionality,
        if experimental features are available, etc.

        The configuration is always specific to a single authenticated user.

        Adding new fields here is fine, but you cannot make backwards-incompatible changes (removing
        fields or change the meaning of fields in backwards-incompatible ways.) If you need to do that,
        then read up on https://github.com/sourcegraph/sourcegraph/pull/63591#discussion_r1663211601

        After adding a field here, you can implement it in cmd/frontend/internal/clientconfig/clientconfig.go
        GetForActor method.
    ClientSideModelConfig:
      type: object
      properties:
        openAICompatible:
          type: object
          allOf:
            - $ref: '#/components/schemas/ClientSideModelConfigOpenAICompatible'
          nullable: true
      description: |-
        Anything that needs to be provided to Cody clients at the model-level can go here.

        For example, allowing the server to customize/override the LLM
        prompt used. Or describe how clients should upload context to
        remote servers, etc. Or "hints", like "this model is great when
        working with 'C' code.".
    ClientSideModelConfigOpenAICompatible:
      type: object
      properties:
        stopSequences:
          type: array
          items:
            type: string
          description: (optional) List of stop sequences to use for this model.
        endOfText:
          type: string
          description: (optional) EndOfText identifier used by the model. e.g. "<|endoftext|>", "< EOT >"
        contextSizeHintTotalCharacters:
          type: integer
          format: uint32
          nullable: true
          minimum: 0
          description: |-
            (optional) A hint the client should use when producing context to send to the LLM.
            The maximum length of all context (prefix + suffix + snippets), in characters.
        contextSizeHintPrefixCharacters:
          type: integer
          format: uint32
          nullable: true
          minimum: 0
          description: |-
            (optional) A hint the client should use when producing context to send to the LLM.
            The maximum length of the document prefix (text before the cursor) to include, in characters.
        contextSizeHintSuffixCharacters:
          type: integer
          format: uint32
          nullable: true
          minimum: 0
          description: |-
            (optional) A hint the client should use when producing context to send to the LLM.
            The maximum length of the document suffix (text after the cursor) to include, in characters.
        chatPreInstruction:
          type: string
          description: |-
            (optional) Custom instruction to be included at the start of all chat messages
            when using this model, e.g. "Answer all questions in Spanish."

            Note: similar to Cody client config option `cody.chat.preInstruction`; if user has
            configured that it will be used instead of this.
        editPostInstruction:
          type: string
          description: |-
            (optional) Custom instruction to be included at the end of all edit commands
            when using this model, e.g. "Write all unit tests with Jest instead of detected framework."

            Note: similar to Cody client config option `cody.edit.preInstruction`; if user has
            configured that it will be respected instead of this.
        autocompleteSinglelineTimeout:
          type: integer
          format: uint32
          minimum: 0
          description: |-
            (optional) How long the client should wait for autocomplete results to come back (milliseconds),
            before giving up and not displaying an autocomplete result at all.

            This applies on single-line completions, e.g. `var i = <completion>`

            Note: similar to hidden Cody client config option `cody.autocomplete.advanced.timeout.singleline`
            If user has configured that, it will be respected instead of this.
        autocompleteMultilineTimeout:
          type: integer
          format: uint32
          minimum: 0
          description: |-
            (optional) How long the client should wait for autocomplete results to come back (milliseconds),
            before giving up and not displaying an autocomplete result at all.

            This applies on multi-line completions, which are based on intent-detection when e.g. a code block
            is being completed, e.g. `func parseURL(url string) {<completion>`

            Note: similar to hidden Cody client config option `cody.autocomplete.advanced.timeout.multiline`
            If user has configured that, it will be respected instead of this.
        chatTopK:
          type: number
          format: double
          nullable: true
          description: (optional) model parameters to use for the chat feature
        chatTopP:
          type: number
          format: double
          nullable: true
        chatTemperature:
          type: number
          format: double
          nullable: true
          minimum: 0
          maximum: 2
        chatMaxTokens:
          type: integer
          format: uint32
        autoCompleteTopK:
          type: number
          format: double
          nullable: true
          description: (optional) model parameters to use for the autocomplete feature
        autoCompleteTopP:
          type: number
          format: double
          nullable: true
        autoCompleteTemperature:
          type: number
          format: double
          nullable: true
          minimum: 0
          maximum: 2
        autoCompleteSinglelineMaxTokens:
          type: integer
          format: uint32
          minimum: 0
        autoCompleteMultilineMaxTokens:
          type: integer
          format: uint32
          minimum: 0
        editTopK:
          type: number
          format: double
          nullable: true
          description: (optional) model parameters to use for the edit feature
        editTopP:
          type: number
          format: double
          nullable: true
        editTemperature:
          type: number
          format: double
          nullable: true
          minimum: 0
          maximum: 2
        editMaxTokens:
          type: integer
          format: uint32
          minimum: 0
      description: |-
        Client-side model configuration used when the model is backed by an OpenAI-compatible API
        provider.
    CompletionMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum:
            - user
            - assistant
            - system
        content:
          anyOf:
            - type: string
            - type: array
              items:
                $ref: '#/components/schemas/MessageContentPart'
    CompletionRequest:
      type: object
      required:
        - model
        - messages
      properties:
        model:
          type: string
          description: |-
            The language model to use for the completion.
            Call `/.api/modelconfig/supported-models.json` to get the list of available models.
        messages:
          type: array
          items:
            $ref: '#/components/schemas/CompletionMessage'
          description: |-
            The messages to generate completions for.
            When using `/.api/completions/code`, only include one message with the speaker 'human'.
        tools:
          type: array
          items:
            $ref: '#/components/schemas/AssistantToolsFunction'
          nullable: true
          description: |-
            Optional list of tool function definitions supported by the assistant.
            There can be a maximum of 128 tools per assistant.
        maxTokensToSample:
          type: integer
          format: int32
          description: |-
            The maximum number of tokens to generate before stopping.
            Note that our models may stop before reaching this maximum. This parameter only specifies the absolute maximum number of tokens to generate.
        temperature:
          type: number
          format: double
          description: |-
            Amount of randomness injected into the response.

            Defaults to 1.0. Ranges from 0.0 to 1.0. Use temperature closer to 0.0
            for analytical / multiple choice, and closer to 1.0 for creative and
            generative tasks.

            Note that even with temperature of 0.0, the results will not be fully
            deterministic.
        stopSequences:
          type: array
          items:
            type: string
          description: |-
            Sequences that will cause the model to stop generating.

            Our models stop on "\n\nHuman:", and may include additional built-in stop
            sequences in the future. By providing the `stop_sequences` parameter, you may
            include additional strings that will cause the model to stop generating.
        topK:
          type: integer
          format: int32
          description: |-
            Only sample from the top K options for each subsequent token.

            Used to remove "long tail" low probability responses. Learn more technical details here:
            https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277

            Recommended for advanced use cases only. You usually only need to use temperature.
        topP:
          type: number
          format: double
          description: |-
            Use nucleus sampling.

            In nucleus sampling, we compute the cumulative distribution over all the
            options for each subsequent token in decreasing probability order and cut it
            off once it reaches a particular probability specified by `top_p`. You should
            either alter temperature or `top_p`, but not both.

            Recommended for advanced use cases only. You usually only need to use temperature.
        stream:
          type: boolean
          nullable: true
          description: |-
            Whether to stream the response.

            - When true, the response body is an SSE stream of `event: completion\ndata: JSON` where
            each JSON blob is a `CompletionResponse`.
            - When false, the response body is a single JSON-encoded `CompletionResponse`.
        logprobs:
          type: integer
          format: uint8
          description: |-
            Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens. For example, if logprobs is 5, the API will return a list of the 5 most likely tokens. The API will always return the logprob of the sampled token, so there may be up to logprobs+1 elements in the response.
            The maximum value for logprobs is 5.
            For more details, see Fireworks API docs https://docs.fireworks.ai/api-reference/post-completions
    CompletionResponse:
      type: object
      properties:
        completion:
          type: string
          description: |-
            Completion is the full completion string. This field
            is only present when using the `/.api/completions/code` or when
            using `api-version=1` or older with `/.api/completions/stream`.

            In the V2 API for streaming responses, the `deltaText` property is used
            instead.
        deltaText:
          type: string
          description: |-
            DeltaText is the incremental text that was added to the prompt.
            This field is only present in streaming responses to `/.api/completions/stream`.
        tool_calls:
          type: array
          items:
            $ref: '#/components/schemas/ToolCall'
          nullable: true
          description: The full list of tool calls. This field is only present for non-streaming responses.
        delta_tool_calls:
          type: array
          items:
            $ref: '#/components/schemas/ToolCall'
          nullable: true
          description: |-
            Same as `tool_calls`, but only present in streaming responses to
            `/.api/completions/stream`.  The semantics for this field is that the
            function.arguments field should be concatenated between streaming chunks,
            eventually forming a valid JSON object.
        model:
          type: string
          nullable: true
          description: |-
            The model used for completion.
            NOTE: this model may be different than the model specified in the request.
            Requires `api-version=5` or higher.
        stopReason:
          type: string
          description: |-
            The reason the model stopped generating tokens. The exact format
            of this field is defined by the model provider.

            For OpenAI models, the following stop reasons are defined:
            - `stop`: the model hit a natural stop point or a provided stop sequence.
            - `length`: the maximum number of tokens specified in the request was reached.
            - `content_filter`: content was omitted due content filters.

            For Anthropic models, the following stop reasons are defined:
            - "stop_sequence": we reached a stop sequence either provided via the
            stop_sequences parameter, or a stop sequence built into the model.
            - "max_tokens": we exceeded max_tokens_to_sample or the model's maximum limit.
        usage:
          type: object
          allOf:
            - $ref: '#/components/schemas/CompletionUsage'
          nullable: true
          description: |-
            Usage is the number of tokens used in the completion.
            Requires `api-version=5` or higher.
        logprobs:
          type: object
          allOf:
            - $ref: '#/components/schemas/Logprobs'
          nullable: true
    CompletionUsage:
      type: object
      required:
        - completion_tokens
        - prompt_tokens
        - total_tokens
      properties:
        completion_tokens:
          type: integer
          format: int32
          description: Number of tokens in the generated completion.
        prompt_tokens:
          type: integer
          format: int32
          description: Number of tokens in the prompt.
        total_tokens:
          type: integer
          format: int32
          description: Total number of tokens used in the request (prompt + completion).
      description: Usage statistics for the completion request.
    ContextWindow:
      type: object
      required:
        - maxInputTokens
        - maxOutputTokens
      properties:
        maxInputTokens:
          type: integer
          format: int32
        maxOutputTokens:
          type: integer
          format: int32
    DefaultModels:
      type: object
      required:
        - chat
        - fastChat
        - codeCompletion
      properties:
        chat:
          type: string
        fastChat:
          type: string
        codeCompletion:
          type: string
    FilePart:
      type: object
      required:
        - type
        - file
      properties:
        type:
          type: string
          enum:
            - file
        file:
          type: object
          properties:
            uri:
              type: string
            language_id:
              type: string
            content:
              type: string
          required:
            - uri
      allOf:
        - $ref: '#/components/schemas/MessageContentPart'
    FunctionObject:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-zA-Z0-9_-]+$
          description: |-
            The name of the function to be called. Must be a-z, A-Z, 0-9, or
            contain underscores and dashes, with a maximum length of 64.
        description:
          type: string
          description: |-
            A description of what the function does, used by the model to
            choose when and how to call the function.
        strict:
          type: boolean
          nullable: true
          description: |-
            Whether to enable strict schema adherence when generating the
            function call. If set to true, the model will follow the exact
            schema defined in the `parameters` field. Only a subset of JSON
            Schema is supported when `strict` is `true`.
        parameters:
          type: object
          additionalProperties: {}
          description: |-
            The parameters the functions accepts, described as a JSON Schema object.
            See the guide for examples, and the JSON Schema reference for documentation
            about the format.

            Omitting `parameters` defines a function with an empty parameter list.
    ImagePart:
      type: object
      required:
        - type
        - image_url
      properties:
        type:
          type: string
          enum:
            - image_url
        image_url:
          type: object
          properties:
            url:
              type: string
            detail:
              type: string
              enum:
                - low
                - high
                - auto
          required:
            - url
      allOf:
        - $ref: '#/components/schemas/MessageContentPart'
    ListToolsResponse:
      type: object
      required:
        - tools
      properties:
        tools:
          type: array
          items:
            $ref: '#/components/schemas/ToolInformation'
    Location:
      type: object
      required:
        - repo
        - path
        - oid
      properties:
        repo:
          type: string
          description: The Sourcegraph repository name. For example, 'github.com/sourcegraph/cody'.
        path:
          type: string
          description: The path relative to the git root.
        oid:
          type: string
          description: The Git object ID (SHA) of the file.
        ref:
          type: string
          nullable: true
          description: |-
            (optional) The Git reference (branch or tag) to use.  Useful to track the
            position when the oid is lost, for example due to a force push. The ref
            may also get lost, for example `/refs/pull/N/head` can be deleted after
            the pull request N is closed.
        range:
          type: object
          allOf:
            - $ref: '#/components/schemas/Range'
          nullable: true
          description: (optional) A source position in this path.
      description: A location in a source file.
    Logprobs:
      type: object
      required:
        - tokens
        - token_logprobs
        - top_logprobs
        - text_offset
      properties:
        tokens:
          type: array
          items:
            type: string
        token_logprobs:
          type: array
          items:
            type: number
            format: double
        top_logprobs:
          type: array
          items:
            type: object
            additionalProperties:
              type: number
              format: double
        text_offset:
          type: array
          items:
            type: integer
            format: int32
    MessageContentPart:
      type: object
      required:
        - type
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
        mapping:
          text: '#/components/schemas/TextPart'
          image_url: '#/components/schemas/ImagePart'
          file: '#/components/schemas/FilePart'
          repo: '#/components/schemas/RepoPart'
    Model:
      type: object
      required:
        - modelRef
        - displayName
        - modelName
        - capabilities
        - category
        - status
        - tier
        - contextWindow
      properties:
        modelRef:
          type: string
        displayName:
          type: string
        modelName:
          type: string
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/ModelCapability'
        category:
          $ref: '#/components/schemas/ModelCategory'
        status:
          $ref: '#/components/schemas/ModelStatus'
        tier:
          $ref: '#/components/schemas/ModelTier'
        contextWindow:
          $ref: '#/components/schemas/ContextWindow'
        clientSideConfig:
          type: object
          allOf:
            - $ref: '#/components/schemas/ClientSideModelConfig'
          nullable: true
        estimatedModelCost:
          type: object
          allOf:
            - $ref: '#/components/schemas/ModelCost'
          nullable: true
    ModelCapability:
      type: string
      enum:
        - autocomplete
        - chat
    ModelCatalog:
      type: object
      required:
        - schemaVersion
        - revision
        - providers
        - models
        - defaultModels
      properties:
        schemaVersion:
          type: string
        revision:
          type: string
        providers:
          type: array
          items:
            $ref: '#/components/schemas/Provider'
        models:
          type: array
          items:
            $ref: '#/components/schemas/Model'
        defaultModels:
          $ref: '#/components/schemas/DefaultModels'
    ModelCategory:
      type: string
      enum:
        - balanced
        - speed
        - other
        - accuracy
    ModelCost:
      type: object
      required:
        - unit
        - inputTokenPennies
        - outputTokenPennies
      properties:
        unit:
          type: string
          enum:
            - mtok
            - btok
        inputTokenPennies:
          type: integer
          format: int32
        outputTokenPennies:
          type: integer
          format: int32
    ModelStatus:
      type: string
      enum:
        - experimental
        - beta
        - stable
        - deprecated
    ModelTier:
      type: string
      enum:
        - free
        - pro
        - enterprise
    ModelUsage:
      type: object
      properties:
        model:
          type: string
          nullable: true
          description: The reference to the model used in the review.
        usage:
          type: object
          allOf:
            - $ref: '#/components/schemas/CompletionUsage'
          nullable: true
          description: The number of tokens used by this model.
    PatternFilters:
      type: object
      properties:
        include:
          type: array
          items:
            type: string
          nullable: true
          description: |-
            List of regexp patterns to include. An empty list indicates everything
            matches.
        exclude:
          type: array
          items:
            type: string
          nullable: true
          description: |-
            List of regexp patterns to exclude. An empty list indicates everything
            matches.
      description: |-
        Utility model for the commonly reused include/exclude patterns.

        The longest regexp takes precedence. For example, `include: ["src/"]` and
        `exclude: ["src/main.go"]` will include all files in the `src/` directory
        except `src/main.go`. The same precedence rules applies the other way around,
        so `include: [".*", "src/main.go"]` and `exclude: ["src/"]` will include everything
        unless it's in the `src/` directory and isn't `src/main.go`.
    Position:
      type: object
      required:
        - line
      properties:
        line:
          type: integer
          format: int32
          description: 0-based number within the file.
        character:
          type: integer
          format: int32
          nullable: true
          description: UTF-16 code unit position in the file.
    Provider:
      type: object
      required:
        - id
        - displayName
      properties:
        id:
          type: string
        displayName:
          type: string
    Range:
      type: object
      properties:
        start:
          type: object
          allOf:
            - $ref: '#/components/schemas/Position'
          nullable: true
          description: The range's start position.
        end:
          type: object
          allOf:
            - $ref: '#/components/schemas/Position'
          nullable: true
          description: The range's end position.
    RepoPart:
      type: object
      required:
        - type
        - repo
      properties:
        type:
          type: string
          enum:
            - repo
        repo:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            filePatterns:
              type: array
              items:
                type: string
      allOf:
        - $ref: '#/components/schemas/MessageContentPart'
    Review:
      type: object
      required:
        - review_id
        - created_at
        - updated_at
      properties:
        review_id:
          type: integer
          format: int32
          description: |-
            The unique ID for this review reponse. Used to track quality metrics
            such as the precision/recall of a review rule.
        request:
          type: object
          allOf:
            - $ref: '#/components/schemas/ReviewRequest'
          nullable: true
          description: The request that triggered this review.
        repo_id:
          type: integer
          format: int64
          nullable: true
          description: The database ID of the repository.
        pull_request_synchronization_id:
          type: integer
          format: int64
          nullable: true
        base_oid:
          type: string
          nullable: true
          description: The OID of the base revision where the diff was computed from.
        head_oid:
          type: string
          nullable: true
          description: The OID of the head revision where the diff was computed from.
        rules_applied:
          type: array
          items:
            type: string
          nullable: true
          description: |-
            The rule IDs that were applied to this review.

            Rules from the request are not automatically applied because rules can
            declare filters like "only trigger for TypeScript changes".
        review_duration_ms:
          type: integer
          format: int32
          nullable: true
          description: The duration of the review in milliseconds.
        model_usages:
          type: array
          items:
            $ref: '#/components/schemas/ModelUsage'
          nullable: true
          description: The number of tokens used by this review request grouped by models.
        diagnostics:
          type: array
          items:
            $ref: '#/components/schemas/ReviewDiagnostic'
          nullable: true
          description: |-
            The diagnostics returned by the review rules.

            Note: the rule IDs in the diagnostics list are not guaranteed to match
            the provided rules in the list. It's the client's responsibility to decide
            what to do with invalid diagnostics.
        created_at:
          type: string
          description: ISO 8601 formatted DateTime.
        updated_at:
          type: string
          description: ISO 8601 formatted DateTime.
    ReviewDiagnostic:
      type: object
      required:
        - diagnostic_id
        - review_id
        - rule_id
        - severity
        - location
        - message
      properties:
        diagnostic_id:
          type: integer
          format: int32
          description: |-
            A unique ID for this diagnostic, which can be used to track quality
            metrics such as the precision/recall of a review rule.
        review_id:
          type: integer
          format: int32
          description: The ID of the review that produced this diagnostic.
        rule_id:
          type: string
          description: The ID of the rule that produced this comment.
        severity:
          type: string
          enum:
            - error
            - warning
            - info
          description: |-
            The severity of the comment, allowing the client to optionally skip
            displaying low-severity comments like warnings of infos.
        location:
          allOf:
            - $ref: '#/components/schemas/Location'
          description: What code location does the diagnostic apply to?
        message:
          type: string
          description: The main message of the review comment.
    ReviewDiagnosticEvaluationAuthor:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - user
            - llm_judge
        user_id:
          type: string
          nullable: true
        llm_judge:
          type: string
          nullable: true
    ReviewDiagnosticFeedback:
      type: object
      required:
        - review_id
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          format: int32
          nullable: true
        review_id:
          type: integer
          format: int32
        diagnostic_id:
          type: integer
          format: int32
          nullable: true
        confusion_label:
          type: string
          enum:
            - true-positive
            - false-positive
            - true-negative
            - false-negative
          nullable: true
        helpfulness_label:
          type: string
          enum:
            - strongly-agree
            - agree
            - neutral
            - disagree
            - strongly-disagree
          nullable: true
        conversation_id:
          type: string
          nullable: true
        author:
          type: object
          allOf:
            - $ref: '#/components/schemas/ReviewDiagnosticEvaluationAuthor'
          nullable: true
        created_at:
          type: string
          description: ISO 8601 formatted DateTime.
        updated_at:
          type: string
          description: ISO 8601 formatted DateTime.
    ReviewDiff:
      type: object
      required:
        - repo
        - head
      properties:
        repo:
          type: string
          description: |-
            The repository name as it appears in Sourcegraph. For example, the GitHub
            repository sourcegraph/cody has the repo name "github.com/sourcegraph/cody".
        head:
          type: string
          description: |-
            The branch, tag, or commit to diff against.

            For GitHub Pull Requests with number 100, use the revision: "refs/pull/100/head"
            For Gitlab Merge Request with number 200, use the revision: "refs/merge-requests/200/head"
        base:
          type: string
          nullable: true
          description: |-
            (optional) The base revision to diff against.  If omitted, diff against
            the merge base between the head and the default branch of the repository.

            Explanation: merge base is the best common ancestor(s) between two
            commits to use in a three-way merge.
        inline_unified_diff:
          type: string
          nullable: true
          description: |-
            (optional) The inline unified diff to review.
            When provided, the agent will parse this with sourcegraph/go-diff, instead of
            reading the diff from the remote repository.
        context_line_count:
          type: integer
          format: int32
          nullable: true
          minimum: 0
          description: |-
            (optional) The number of context lines to include in the diff.  A larger
            number means more unmodified code is included in the diff, which can have
            pros (better understanding of the codebase) and cons (more noise, slower
            response).
          default: 5
        pull_request_api_url:
          type: string
          nullable: true
          description: |-
            (optional) The API URL of the pull request. When provided, the agent
            will only review the delta between the last agent review of the same PR.
        path_filters:
          type: object
          allOf:
            - $ref: '#/components/schemas/PatternFilters'
          nullable: true
          description: |-
            (optional) Only trigger for certain file paths or exclude for certain file paths.

            For example, `paths: {include: ["src/main/"], exclude: ["Main.java"]}`
            will trigger for file paths that match the `src/main/` directory, but not
            files matching the name `"Main.java"`.
        repo_filters:
          type: object
          allOf:
            - $ref: '#/components/schemas/PatternFilters'
          nullable: true
          description: |-
            (optional) Only trigger for certain repositories or exclude for certain repositories.

            For example, `repos: {include: ["github.com/sourcegraph/cody"]}` will trigger
            for Cody, and `repos: {exclude: ["github.com/sourcegraph/cody"]}` will trigger
            for all repos except Cody.
        language_filters:
          type: object
          allOf:
            - $ref: '#/components/schemas/PatternFilters'
          nullable: true
          description: |-
            (optional) Only trigger for certain languages or exclude for certain languages.

            For example, `languages: {include: ["typescript"]}` will trigger for
            files containing TypeScript source code regardless if it's written in
            `*.ts` or `*.tsx` files.
        text_content_filters:
          type: object
          allOf:
            - $ref: '#/components/schemas/PatternFilters'
          nullable: true
          description: |-
            (optional) Only trigger for certain file contents or exclude for certain file contents.

            For example, `content: {include: ["fmt.Println"]}` will trigger on files
            containing the string "fmt.Println", and `content: {exclude: ["// ignore:go-style"]}` will trigger on
            files not containing the string "// ignore:go-style".
    ReviewRequest:
      type: object
      properties:
        config:
          type: object
          allOf:
            - $ref: '#/components/schemas/ReviewRequestConfiguration'
          nullable: true
        diff:
          type: object
          allOf:
            - $ref: '#/components/schemas/ReviewDiff'
          nullable: true
    ReviewRequestConfiguration:
      type: object
      required:
        - rules
      properties:
        rules:
          type: array
          items:
            type: string
          description: |-
            List of review rule IDs to run for this request.
            - Use URLs to the Sourcegraph instance to reference *.rule.md files from
            any repository. For example:
            "https://sourcegraph.sourcegraph.com/github.com/sourcegraph/cody/blob/main/rules/agent.rule.md"
            - Use the value ["all-builtin"] to run all built-in rules.
            - Use the value ["all-inferred"] to run all inferred rules based on the
            changed files in the diff. A rule is inferred if it has the file path
            "*.rule.md" anywhere under a `.sourcegraph/` directory that is a parent
            of changed files.

            A *.rule.md file must be formatted as a valid Markdown file with an optional frontmatter
            block containing YAML configuration. Example:
            ```
            ---
            id: mixed-css-colors
            display_name: "Mixed CSS Colors"
            description: "Prevents yellow and blue colors from being used in the same CSS file."
            tags: ["webdesign"]
            lang: "css"
            ---
            When there is yellow and blue color in the code, report an error.
            ```
            When there is no frontmatter, the rule ID is the basename of the file without the ".rule.md" suffix.
            For example, "my-rule.rule.md" will have the ID "my-rule".

            The request errors if `rules` is empty and `custom_inline_rules` is also empty.

            The GitHub App to review Pull Requests defaults rules to `["all-builtin", "all-inferred"]`.
            You can override those defaults with the agent program file `.sourcegraph/review-agent.json`.
        review_style:
          type: string
          enum:
            - default
            - high-bar
            - balanced
            - custom:...
          nullable: true
          description: |-
            (optional) The style of code review to perform.

            - "default": use the default code review style. At this moment, "high-bar"
            is the default.
            - "high-bar": optimize for precision over recall. Identify and report
            only the most important issues and minimize false posivites like nitpick
            comments.
            - "balanced": optimize for a balance between precision and recall.  It's
            OK to report lower-severity issues like calling out code style
            improvements.
            - "custom:...": define a custom code review style.
          default: default
        custom_inline_rules:
          type: array
          items:
            $ref: '#/components/schemas/ReviewRule'
          nullable: true
          description: (optional) list of custom rules to run with this request.
        preferred_model:
          type: string
          nullable: true
          description: |-
            (optional) The model to use for this rule. If not specified, a default
            model is used that strikes a balance between quality, performance, and cost.
        minimum_severity:
          type: string
          enum:
            - error
            - warning
            - info
          nullable: true
          description: (optional) The minimum severity of diagnostics to include in the review.
          default: warning
        additional_context:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: |-
            (optional) Additional context to include in the review. For example,
            you can provide the pull request title and description with the value:
            ```json
            {
              "pr_title": "Add a new feature",
              "pr_description": "This PR adds a new feature to the application."
            }
            ```
    ReviewRetrieveRulesResponse:
      type: object
      required:
        - rules
      properties:
        rules:
          type: array
          items:
            $ref: '#/components/schemas/ReviewRule'
    ReviewRule:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: 'Example: "myrule".'
        display_name:
          type: string
          nullable: true
          description: 'Example: "My Review Rule". Defaults to the capitalized basename of the URI.'
        description:
          type: string
          nullable: true
          description: 'Example: "My review rule description. Catches bugs of type X."'
        instruction:
          type: string
          nullable: true
          description: |-
            For user-provided rules, a natural language instruction for how the rule
            should behave.
        tags:
          type: array
          items:
            type: string
          nullable: true
          description: (optional) Tags to categorize the rule. Useful if you want to organize a large set of rules.
        path_filters:
          type: object
          allOf:
            - $ref: '#/components/schemas/PatternFilters'
          nullable: true
          description: |-
            (optional) Only trigger for certain file paths or exclude for certain file paths.

            For example, `paths: {include: ["src/main/"], exclude: ["Main.java"]}`
            will trigger for file paths that match the `src/main/` directory, but not
            files matching the name `"Main.java"`.
        repo_filters:
          type: object
          allOf:
            - $ref: '#/components/schemas/PatternFilters'
          nullable: true
          description: |-
            (optional) Only trigger for certain repositories or exclude for certain repositories.

            For example, `repos: {include: ["github.com/sourcegraph/cody"]}` will trigger
            for Cody, and `repos: {exclude: ["github.com/sourcegraph/cody"]}` will trigger
            for all repos except Cody.
        language_filters:
          type: object
          allOf:
            - $ref: '#/components/schemas/PatternFilters'
          nullable: true
          description: |-
            (optional) Only trigger for certain languages or exclude for certain languages.

            For example, `languages: {include: ["typescript"]}` will trigger for
            files containing TypeScript source code regardless if it's written in
            `*.ts` or `*.tsx` files.
        text_content_filters:
          type: object
          allOf:
            - $ref: '#/components/schemas/PatternFilters'
          nullable: true
          description: |-
            (optional) Only trigger for certain file contents or exclude for certain file contents.

            For example, `content: {include: ["fmt.Println"]}` will trigger on files
            containing the string "fmt.Println", and `content: {exclude: ["// ignore:go-style"]}` will trigger on
            files not containing the string "// ignore:go-style".
    TextPart:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - text
        text:
          type: string
      allOf:
        - $ref: '#/components/schemas/MessageContentPart'
    ToolCall:
      type: object
      required:
        - id
        - type
        - function
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
        function:
          allOf:
            - $ref: '#/components/schemas/ToolCallFunction'
          description: The function that the model called.
    ToolCallFunction:
      type: object
      required:
        - name
        - arguments
      properties:
        name:
          type: string
          description: The name of the function to call.
        arguments:
          type: string
          description: |-
            The arguments to call the function with, as generated by the model in JSON format.
            Note that the model does not always generate valid JSON, and may hallucinate parameters
            not defined by your function schema. Validate the arguments in your code before
            calling your function.
    ToolInformation:
      type: object
      required:
        - request_path
        - function
        - return_type
      properties:
        request_path:
          type: string
        function:
          $ref: '#/components/schemas/FunctionObject'
        return_type:
          type: object
          additionalProperties: {}
  securitySchemes:
    SourcegraphTokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: |-
        Authenticate to Sourcegraph APIs with the HTTP header "Authorization" using
        the following formatting:

        ```
        Authorization: token TOKEN_VALUE
        ```
        In most cases, a Sourcegraph access token looks like this `sgp_asdadakjaaaaaaabbbbbbssswwwwaaal2131kasdaakkkkkq21asdasaa`.

        In rare cases, you may encounter other kinds of token formats, which are documented in the table below.

        |                  Token Name                  |                                   Description                                    |            Type            |    Regular Expression     |                         |
        | -------------------------------------------- | -------------------------------------------------------------------------------- | -------------------------- | ------------------------- | ----------------------- |
        | Sourcegraph Access Token (v3)                | Token used to access the Sourcegraph GraphQL API                                 | User-generated             | `sgp_(?:[a-fA-F0-9]{16}\|local)_[a-fA-F0-9]{40}` |
        | Sourcegraph Access Token (v2, deprecated)    | Token used to access the Sourcegraph GraphQL API                                 | User-generated             | `sgp_[a-fA-F0-9]{40}`     |                         |
        | Sourcegraph Access Token (v1, deprecated)    | Token used to access the Sourcegraph GraphQL API                                 | User-generated             | `[a-fA-F0-9]{40}`         |                         |
        | Sourcegraph Dotcom User Gateway Access Token | Token used to grant sourcegraph.com users access to Cody                         | Backend (not user-visible) | `sgd_[a-fA-F0-9]{64}`     |                         |
        | Sourcegraph License Key Token                | Token used for product subscriptions, derived from a Sourcegraph license key     | Backend (not user-visible) | `slk_[a-fA-F0-9]{64}`     |                         |
        | Sourcegraph Enterprise subscription (aka "product subscription") Token       | Token used for Enterprise subscriptions, derived from a Sourcegraph license key | Backend (not user-visible) | `sgs_[a-fA-F0-9]{64}`     |                         |
